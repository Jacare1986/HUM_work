/**
 * Copyright 2014 - University of Vigo - Spain (www.uvigo.es)
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */

package org.humsat.demo.gssw.opstools.tcsequences.tcwrappers;

import com.xatcobeo.gssw.tmtc.DataTypes.TcScheduler;
import com.xatcobeo.gssw.tmtc.DataTypes.TimeStamp;
import com.xatcobeo.gssw.tmtc.TMTC;
import com.xatcobeo.gssw.tmtc.TMTCSet;
import com.xatcobeo.gssw.tmtc.exceptions.UnknownException;
import com.xatcobeo.gssw.tmtc.exceptions.UnknownTCCodeException;
import com.xatcobeo.gssw.tmtc.interfaces.TMTCInterface;
import com.xatcobeo.gssw.tmtc.services.OBOpsSchedulingService.TC.TCAddTelecommandAbsoluteTime;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author alberto.gonzalez(at)humsat.org
 */
public class SCService {
    
    /**
     * Builds a SC_RQ_ADDABS request (TMTC).
     * @return tc, TMTC object of the SC_RQ_ADDABS request.
     */
    public static TMTC SCAddAbs(TMTC task, Date time){
        try {
            TMTC schTC = TMTCSet.createTC(TMTCInterface.TC_ADD_TELECOMMAND_ABSOLUTE_TIME_ID);
            
            TcScheduler tc= new TcScheduler();
            tc.setTC(task);
            
            HashMap schParams = new HashMap();
            schParams.put(TCAddTelecommandAbsoluteTime.TIME_SCH, getTimestamp(time));
            schParams.put(TCAddTelecommandAbsoluteTime.TC_SCH, tc);
            schTC.setParams(schParams);
            
            return schTC;
            
        } catch (UnknownTCCodeException | UnknownException ex) {
            Logger.getLogger(SCService.class.getName()).log(Level.SEVERE, null, ex);
            return null;
        }
   }
    
    /**
     * Builds a SC_RQ_SUMMARIZED request (TMTC).
     * @return tc, TMTC object of the SC_RQ_SUMMARIZED request.
     */
    public static TMTC SCSummarized(){
        try {
            TMTC tc = TMTCSet.createTC(TMTCInterface.TC_REPORT_COMMAND_SCHEDULE_IN_SUMMARY_FORM_ID);
            return (tc);
            
        } catch (UnknownTCCodeException ex) {
            Logger.getLogger(SCService.class.getName()).log(Level.SEVERE, null, ex);
            return null;
        }
    }
    
    public static TimeStamp getTimestamp(Date time){
        try {
         TimeStamp timestamp = new TimeStamp(); 
            
            SimpleDateFormat sdf  = new SimpleDateFormat("dd MMM yyyy HH:mm:ss.SSS",Locale.ENGLISH);          
            Date date_epoch = sdf.parse("01 Jan 2012 00:00:00.000");
            
            long offset=0;
            long groundTime=time.getTime();
            long epoch=date_epoch.getTime();
            double M=100;
            
            timestamp.setGroundTime(groundTime, M, epoch, offset);
            return timestamp;
            
        } catch (ParseException ex) {
            Logger.getLogger(SCService.class.getName()).log(Level.SEVERE, null, ex);
            return null;
        }
         
    }
}
