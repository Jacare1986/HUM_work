package experiments;

/**
 * Copyright 2014 - University of Vigo - Spain (www.uvigo.es)
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */


import com.xatcobeo.gssw.tmtc.TMTC;
import java.util.ArrayList;
import java.util.Date;

import experiments.TCSequences;
import experiments.OPService;
import experiments.SCService;

/**
 *
 * @author alberto.gonzalez(at)humsat.org
 */
public class HUMPLNoiseBandsSequence implements TCSequences{
    
    public static final String NAME =  "HUMPLNoiseBandsSequence";
    
    private Date sequenceTime;
    private String[] config;
    
    public HUMPLNoiseBandsSequence(Date sequenceTime, String configString){
        this.sequenceTime = sequenceTime;
        this.config = configString.split("/");
        
    }
    
    public ArrayList<TMTC> getTCSequence() {
        
        Date time = new Date();
        ArrayList<TMTC> sequence = new ArrayList<>();
        
        String first = config[0];
        String freq01 = config[1];
        String freq23 = config[2];

        time.setTime(sequenceTime.getTime() - 40 * 1000);
        sequence.add(SCService.SCAddAbs(OPService.HUMPLOn(), time));

        if (first.equalsIgnoreCase("1")) {
            time.setTime(sequenceTime.getTime() - 35 * 1000);
            sequence.add(SCService.SCAddAbs(OPService.HUMPLConfigLoad(4), time));

            time.setTime(sequenceTime.getTime() - 30 * 1000);
            sequence.add(SCService.SCAddAbs(OPService.HUMPLConfigParam(5, 1, "00"), time));

            time.setTime(sequenceTime.getTime() - 25 * 1000);
            sequence.add(SCService.SCAddAbs(OPService.HUMPLConfigParam(49, 8, "D99AF3330CCD2666"), time));

            time.setTime(sequenceTime.getTime() - 20 * 1000);
            sequence.add(SCService.SCAddAbs(OPService.HUMPLConfigParam(97, 2, "001E"), time));
        }

        time.setTime(sequenceTime.getTime() - 10 * 1000);
        sequence.add(SCService.SCAddAbs(OPService.HUMPLConfigParam(1040, 8, freq01), time));

        time.setTime(sequenceTime.getTime() - 5 * 1000);
        sequence.add(SCService.SCAddAbs(OPService.HUMPLConfigParam(1048, 8, freq23), time));

        time.setTime(sequenceTime.getTime());
        sequence.add(SCService.SCAddAbs(OPService.HUMPLToTest(), time));

        time.setTime(sequenceTime.getTime() + 35 * 1000);
        sequence.add(SCService.SCAddAbs(OPService.HUMPLOff(), time));

        return sequence;
    }
}
