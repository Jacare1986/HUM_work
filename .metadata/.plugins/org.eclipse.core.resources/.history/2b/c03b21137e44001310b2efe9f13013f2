package csvreader;

import java.io.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;

import Passes.*;


public class CSVReader {

	public static ArrayList<CommunicationPass> getpasses(String path){
		
		ArrayList<CommunicationPass> passes_list = new ArrayList<CommunicationPass>();	
		String line;
		String[] fields;
		
		try{				
			FileReader f= new FileReader(path);
			BufferedReader br = new BufferedReader(f);
			//We read the first line which only contains format information
			br.readLine();
			
			//Read the rest of the file
			while((line=br.readLine())!=null){
				/**
				 * Don't know why it reads an extra line with "" and not null, so it cannot split and makes an exception
				 * I have to make sure at least the line read is longer than that to obtain values. 
				 * Then, it reaches an null correctly.
				 */
				
				//Obtain different fields from the line read to build a CommunicationPass
				if(line.length()>=4){
					
					fields=line.split(",");
					
					//Obtain size of fields. If it is 4, we are right.
					String pass_number=fields[0];
					String start_time=fields[1];
					String stop_time=fields[2];
					String duration=fields[3];
					
					int case_type=0;
					
					//we build a new CommunicationPass and we add it to a list o pases.
					passes_list.add(new CommunicationPass(pass_number, start_time,stop_time, duration));
					System.out.println(line);
				}
				
			}
			br.close();
		}catch (IOException e){
			System.out.println(e.getMessage());
		}
		return passes_list;
	}
	
	public static void PassesType(ArrayList<CommunicationPass> pases, String path) throws IOException, ParseException{
		
		/**
		 * We compare passes with lightning times
		 * Then we assign to each pass a case type depending on lightning times
		 */
		FileReader f= new FileReader(path);
		BufferedReader br = new BufferedReader(f);
		String line;
		String[] fields;
		SimpleDateFormat sdf  = new SimpleDateFormat("dd MMM yyyy HH:mm:ss.SSS");
		Date light_start,light_stop;
		int it=0;
		
		//We read the first line which only contains format information
		br.readLine();
		
		while(((line=br.readLine())!=null)|(it==4)){

			if(line.length()>=4){
				
				fields=line.split(",");
		
				light_start=sdf.parse(fields[0]);
				light_stop=sdf.parse(fields[1]);
				String light_duration=fields[2];
				
				System.out.println(line);
				Date pass_start = sdf.parse((pases.get(it)).getStartTime());
				Date pass_stop = sdf.parse ((pases.get(it)).getStopTime());
				System.out.println(light_start);
				System.out.println(pass_start);
				
				/**
				 * we check if the pass_start is within light_start and light_stop
				 */
				
				if(pass_start.after(light_start)==true){
					if(pass_start.before(light_stop)==true){
						//Start_Time with light
						if(pass_stop.before(light_stop)==true){
							//pass within light --> case 1
							(pases.get(it)).setCaseType(1);
							//update new pass to compare
							it++;
							System.out.println("case 1");
						}else{
							//part of the pass is within light and the other in eclipse
							//--> case 3
							(pases.get(it)).setCaseType(3);
							//update new pass to compare
							it++;
							System.out.println("case 3");
						}
					}else{
						//do nothing, compare same pass with next lightning time
					}
				}else{
					//pass_start in eclipse
					if(pass_stop.before(light_start)==true){
						//Eclipse pass --> case 2
						(pases.get(it)).setCaseType(2);
						System.out.println("case 2");
						it++;
					}else if(pass_stop.before(light_stop)==true){
						//Pas start in eclipse and end wit light
						(pases.get(it)).setCaseType(4);
						System.out.println("case 4");
						it++;
					}
				}
			}
		}		
		
	}

}
